name: Test Template Script

on:
  push:
    branches: [ main ]
    paths:
      - 'template.py'
      - '.github/workflows/test-template.yml'
      - 'src/**'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - 'template.py'
      - '.github/workflows/test-template.yml'
      - 'src/**'
      - 'requirements*.txt'

jobs:
  test-template:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test directory
      run: |
        # Create a test directory and copy necessary files
        mkdir test_dir
        cp -r src test_dir/
        cp template.py requirements*.txt test_dir/
        cd test_dir
        
        # Store original files for comparison
        find . -type f -name "*.py" -o -name "*.jinja" -o -name "README.md" | while read -r file; do
          if [ -f "$file" ]; then
            if command -v md5sum > /dev/null; then
              md5sum "$file" >> hashes.txt
            else
              md5 -r "$file" >> hashes.txt
            fi
          fi
        done

    - name: Run template script
      working-directory: test_dir
      run: |
        # Run script with auto-yes and verify package setup
        python template.py -y

        # Verify template.py was cleaned up
        if [ -f "template.py" ]; then
          echo "template.py was not cleaned up"
          exit 1
        fi

        # Verify virtual environment
        if [ ! -d "venv" ]; then
          echo "Virtual environment was not created"
          exit 1
        fi

        # Verify files were modified
        echo "Verifying files were modified..."
        while IFS= read -r line; do
          file=$(echo "$line" | cut -d' ' -f2-)
          if [ -f "$file" ]; then
            if command -v md5sum > /dev/null; then
              new_hash=$(md5sum "$file")
            else
              new_hash=$(md5 -r "$file")
            fi
            
            if grep -q "$line" hashes.txt; then
              echo "Error: $file was not modified by the script"
              exit 1
            else
              echo "$file was successfully modified"
            fi
          fi
        done < hashes.txt

        # Clean up hash file
        rm -f hashes.txt

    - name: Test API
      working-directory: test_dir
      run: |
        # Activate virtual environment and test API
        source venv/bin/activate
        cd src
        python -m uvicorn app:app --host 0.0.0.0 --port 8000 &
        UVICORN_PID=$!

        # Wait for server to start
        sleep 5

        # Test health endpoint
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || echo "failed")
        kill $UVICORN_PID

        if [ "$RESPONSE" != "200" ]; then
          echo "API health check failed with response: $RESPONSE"
          exit 1
        else
          echo "API health check successful"
        fi
